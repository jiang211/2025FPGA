// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 24.2 and Filter Design HDL Coder 24.2.
// Generated on: 2024-11-25 20:54:46
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 
// GenerateHDLTestBench: off

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Multipliers           : 4



`timescale 1 ns / 1 ns

module filter
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [7:0] filter_in; //sfix8_En15
  output  signed [7:0] filter_out; //sfix8_En30

////////////////////////////////////////////////////////////////
//Module Architecture: filter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [7:0] coeff1 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff2 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff3 = 8'b00011010; //sfix8_En8
  parameter signed [7:0] coeff4 = 8'b01100110; //sfix8_En8
  parameter signed [7:0] coeff5 = 8'b01100110; //sfix8_En8
  parameter signed [7:0] coeff6 = 8'b00011010; //sfix8_En8
  parameter signed [7:0] coeff7 = 8'b00000000; //sfix8_En8
  parameter signed [7:0] coeff8 = 8'b00000000; //sfix8_En8

  // Signals
  reg  signed [7:0] delay_pipeline [0:7] ; // sfix8_En15
  wire signed [22:0] product6; // sfix23_En30
  wire signed [15:0] mul_temp; // sfix16_En23
  wire signed [22:0] product5; // sfix23_En30
  wire signed [15:0] mul_temp_1; // sfix16_En23
  wire signed [22:0] product4; // sfix23_En30
  wire signed [15:0] mul_temp_2; // sfix16_En23
  wire signed [22:0] product3; // sfix23_En30
  wire signed [15:0] mul_temp_3; // sfix16_En23
  wire signed [23:0] sum1; // sfix24_En30
  wire signed [22:0] add_signext; // sfix23_En30
  wire signed [22:0] add_signext_1; // sfix23_En30
  wire signed [23:0] sum2; // sfix24_En30
  wire signed [23:0] add_signext_2; // sfix24_En30
  wire signed [23:0] add_signext_3; // sfix24_En30
  wire signed [24:0] add_temp; // sfix25_En30
  wire signed [23:0] sum3; // sfix24_En30
  wire signed [23:0] add_signext_4; // sfix24_En30
  wire signed [23:0] add_signext_5; // sfix24_En30
  wire signed [24:0] add_temp_1; // sfix25_En30
  wire signed [7:0] output_typeconvert; // sfix8_En30
  reg  signed [7:0] output_register; // sfix8_En30

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
        end
      end
    end // Delay_Pipeline_process


  assign mul_temp = delay_pipeline[5] * coeff6;
  assign product6 = $signed({mul_temp[15:0], 7'b0000000});

  assign mul_temp_1 = delay_pipeline[4] * coeff5;
  assign product5 = $signed({mul_temp_1[15:0], 7'b0000000});

  assign mul_temp_2 = delay_pipeline[3] * coeff4;
  assign product4 = $signed({mul_temp_2[15:0], 7'b0000000});

  assign mul_temp_3 = delay_pipeline[2] * coeff3;
  assign product3 = $signed({mul_temp_3[15:0], 7'b0000000});

  assign add_signext = product3;
  assign add_signext_1 = product4;
  assign sum1 = add_signext + add_signext_1;

  assign add_signext_2 = sum1;
  assign add_signext_3 = $signed({{1{product5[22]}}, product5});
  assign add_temp = add_signext_2 + add_signext_3;
  assign sum2 = add_temp[23:0];

  assign add_signext_4 = sum2;
  assign add_signext_5 = $signed({{1{product6[22]}}, product6});
  assign add_temp_1 = add_signext_4 + add_signext_5;
  assign sum3 = add_temp_1[23:0];

  assign output_typeconvert = sum3[23:16];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // filter
